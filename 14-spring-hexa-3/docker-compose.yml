version: "3"

# -> was wäre im Fall des Beispiels hier zu starten?
# -> message broker
# -> datenbank
# -> der dienst selbst
# -> werkzeuge ggf. für dev
# -> last verteilung / http proxy

services:
  # -> docker run -p 12345:80 -v `pwd`/www:/usr/share/nginx/html nginx:1.21
  proxy:
    image: nginx:1.21
    ports:
      - "12345:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
    networks:
      - public-net
    # Das stellt sicher sicher, das der Dienst gestartet wird, port checks im Container durchführen
    depends_on:
      - app

  listener:
    image: nodered/node-red:2.1.3
    environment:
      - TZ=Europe/Amsterdam
#    ports:
#      - "1880:1880"
    volumes:
      - listener_data:/data
    networks:
      - broker-net
      - public-net
    depends_on:
      - broker

  # -> docker build -t [order]_[app] .
  # -> docker run [order]_[app]
  db:
    image: mysql:5.7
#    ports:
#      - "3306:3306"
    volumes:
      - "mysql_data:/var/lib/mysql"
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    networks:
      - db-net


  broker:
    image: eclipse-mosquitto
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
#    ports:
#      - 1883:1883
#      - 9001:9001
    restart: unless-stopped
    networks:
      - broker-net

  app:
    build:
      context: .
      args:
        - name=value
    networks:
      - broker-net
      - db-net
      - public-net
    depends_on:
      - db
      - broker
#    ports:
#      - "8080:8080"
    # Entrypoint so konfiguriert ist, dass java gestartet wird
    # command: --spring.jpa.hibernate.ddl-auto=update --spring.datasource.url=jdbc:mysql://db:3306/${MYSQL_DATABASE} --spring.datasource.username=${MYSQL_USER} --spring.datasource.password=${MYSQL_PASSWORD} --spring.datasource.driver-class-name=com.mysql.jdbc.Driver --mqtt.broker=tcp://broker:1883
    environment:
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/${MYSQL_DATABASE}
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver
      MQTT_BROKER: tcp://broker:1883


  dbadmin:
    image: 'phpmyadmin/phpmyadmin'
    environment:
      - PMA_HOST=db
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - PMA_ABSOLUTE_URI=http://localhost:12345/admin/
#    ports:
#      - '8081:80'
    networks:
      - public-net 
      - db-net 

volumes:
  mysql_data:
  mosquitto_log:
  mosquitto_data:
  listener_data:


networks:
  db-net:
    driver: bridge
  broker-net:
    driver: bridge
  public-net:
    driver: bridge
# -> volumes
# -> networks
# -> env
# -> arg
# -> commands
# -> entrypoints
# -> build-konfiguration
# -> depends
# -> ips, dns...
# -> (config)

# -> (skalierung)
